[
    {
        "id": "1",
        "technology": "AR",
        "title": "Guldlock och de tre björnarna",
        "githubRepoUrl": "https://github.com/MustafaMuqtar/unity-fpx-game",
        "image": "/assets/images/ar/guldlock.jpg",
        "files": [
            "https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4"
        ],
        "projectInformation": [
            "Toolkit: XR Interaction",
            "Assets: Unity assets",
            "Models: Blender",
            "Audio: FMOD",
            "Animation: Mixamo"
        ],
        "projectPurpose": "Jag ville lära mig fyra saker i detta projekt: Hur man skapar ett wave system? Hur en spelare kan göra skada på fiende? Hur fienden kan göra skada på spelaren, och hur Unitys enemy-AI fungerar? Projektet var mycket utmanande och jag stötte på många hinder. En av utmaningarna var att beräkna skadan från fienden. Detta blev svårare för mig då fienden i mitt fall var en zombie som inte hade något vapen och hade en specifik animation när den attackerade, vilken jag var tvungen att hålla mig till. Till slut lyckades jag lösa det problemet och även besvara alla mina frågor. Genom detta projekt har mina kunskaper inom programmering utvecklats ytterligare."
    },
    {
        "id": "2",
        "technology": "VR",
        "title": "Agent 0",
        "image": "/assets/images/vr/construction-scene.jpg",
        "files": [],
        "projectInformation": [
            "Datum:",
            "Toolkit: XR Interaction",
            "Scenes: Blender",
            "Assets: Unity",
            "Ljud: FMOD",
            "Karaktärer: Mixamo"
        ],
        "projectPurpose": "I detta projekt ville jag lära mig två saker. För det första, att skapa en berättelse med en tydlig början och slut. För det andra, att inom denna berättelse ha flera scener. Därefter ville jag skapa ett state management-system där jag kan navigera fram och tillbaka mellan dessa scener. När jag befinner mig i en scen ska vissa element visas, och sedan ska jag kunna gå vidare till nästa scen i berättelsen. Om jag återvänder till en föregående scen ska antingen något nytt visas eller det jag senast gjorde fortsätta. Detta projekt lärde mig verkligen hur ett sparsystem fungerar. För en framtida utmaning skulle jag vilja lära mig hur man integrerar ett sparsystem som kommunicerar med en databas och ett API."
    },
    {
        "id": "3",
        "technology": ".NET",
        "title": ".NET Course Application API",
        "image": "/assets/images/angular-images/codechemist-api.jpg",
        "files": [
            "/assets/images/angular-images/codechemist-api.jpg",
            "/assets/images/angular-images/Skärmbild 2024-08-20 184120.png"
        ],
        "projectInformation": [
            "Project Structure: Developed a .NET Web API project using Microsoft.AspNetCore for creating a robust and scalable web application.",
            "Dependency Injection: Utilized Microsoft.Extensions.DependencyInjection to manage dependency injection. Scoped various repositories and services, including custom services like `ICourseService` and `IAccountService`, following best practices for separation of concerns and maintainability.",
            "Authentication and Authorization: Implemented JWT (JSON Web Token) authentication to ensure secure user access. Configured ASP.NET Core Identity for user management, incorporating role-based access, email confirmation requirements, and secure password policies.",
            "Database Integration: Integrated Microsoft.EntityFrameworkCore with SQL Server for data management. Leveraged Entity Framework Core for modeling relational data, including one-to-one and one-to-many relationships, with a focus on efficient data access and manipulation.",
            "Cloud-Based Storage: Configured Cloudinary settings for managing cloud-based image and video storage, enabling efficient media handling and retrieval.",
            "File Uploads: Configured form options to handle large file uploads with a multipart body length limit of 600 MB, ensuring robust file management capabilities.",
            "Data Seeding: Seeded initial data and configured user manager during application startup to populate necessary records and setup required configurations.",
            "Security Configurations: Enhanced security through HTTPS redirection, custom MIME type mappings for static files, and secure static file serving practices.",
            "Email Configuration: Set up SMTP configuration for sending emails, including server details and credentials, to support features like email confirmation and notifications.",
            "HTTP Request Pipeline: Configured the HTTP request pipeline with middleware for authentication, authorization, CORS, static file serving, and custom routing, ensuring a secure and efficient request handling process."
        ],
        "projectPurpose": "Guldlock och de tre björnarna"
    },
    {
        "id": "4",
        "technology": "Angular",
        "title": "Angular Course Application",
        "image": "/assets/images/angular-images/codechemist-front.jpg",
        "files": [
            "/assets/images/angular-images/codechemist-front.jpg"
        ],
        "projectInformation": [
            "Toolkit: Angular CLI",
            "Assets: Angular assets",
            "Models: TypeScript"
        ],
        "projectPurpose": "Guldlock och de tre björnarna"
    },
    {
        "id": "5",
        "technology": "Blender",
        "title": "Inside a house 3D",
        "image": "/assets/images/blender/house-3d/toilet.jpg",
        "files": [
            "/assets/images/blender/house-3d/inside.jpg",
            "/assets/images/blender/house-3d/livingroom.jpg",
            "/assets/images/blender/house-3d/bedroom.jpg",
            "/assets/images/blender/house-3d/hall.jpg",
            "/assets/images/blender/house-3d/kitchen.jpg",
            "/assets/images/blender/house-3d/toilet.jpg"
        ],
        "projectInformation": [
            "Toolkit: Blender",
            "Assets: Blender models",
            "Models: Blender",
            "Audio: None",
            "Animation: None"
        ],
        "projectPurpose": "Guldlock och de tre björnarna"
    },
    {
        "id": "6",
        "technology": "VR",
        "title": "VR Dj",
        "image": "/assets/images/vr/dj.jpg",
        "files": [],
        "projectInformation": [
            "Technology: Blender",
            "Vertices: 65,184",
            "Edges: 122,502",
            "Faces: 58,264",
            "Triangles: 119,376",
            "Purpose: Träna på 3D modellering"
        ],
        "projectPurpose": ""
    },
    {
        "id": "7",
        "technology": ".NET",
        "title": ".NET Music Application API",
        "image": "/assets/images/vue-images/music-api.jpg",
        "files": [
            "/assets/images/Guldlock.jpg",
            "https://codechemist.se/assets/images/codechemist.svg"
        ],
        "projectInformation": [
            "Project Structure: Developed a .NET project using Microsoft.AspNetCore for web application development.",
            "Dependency Injection: Scoped various repositories and services. Configured services for dependency injection using Microsoft.Extensions.DependencyInjection. Utilized View Models for transferring data.",
            "Authentication and Authorization: Implemented JWT (JSON Web Token) authentication for secure user authentication. Configured IdentityCore for user management, including roles and unique email requirements.",
            "Database Integration: Utilized Microsoft.EntityFrameworkCore for database integration. Chose SQL Server as the database. Used Entity Framework for modeling and handling relational data. Implemented many-to-many relationship in the relational data model.",
            "Query: Utilized a custom query with the following parameters: Search Term, Genre, Page Number, Page Size, Ordered By Alphabetical.",
            "Cloud-Based Storage: Configured Cloudinary settings for cloud-based image storage and retrieval.",
            "File Uploads: Configured form options, including a multipart body length limit for file uploads.",
            "Data Seeding: Seeded initial data and user manager during application initialization.",
            "Security Configurations: Configured static file serving and HTTPS redirection for enhanced security.",
            "HTTP Request Pipeline: Configured the HTTP request pipeline, including authentication and authorization middleware."
        ],
        "projectPurpose": "Guldlock och de tre björnarna"
    },
    {
        "id": "8",
        "technology": "Vue",
        "title": "Vue Music Application",
        "image": "/assets/images/vue-images/music-front.jpg",
        "files": [
            "/assets/images/Guldlock.jpg",
            "https://codechemist.se/assets/images/codechemist.svg"
        ],
        "projectInformation": [
            "Toolkit: Vue CLI",
            "Assets: Vue components",
            "Models: JavaScript",
            "Audio: None",
            "Animation: CSS Animations"
        ],
        "projectPurpose": "Guldlock och de tre björnarna"
    },
    {
        "id": "9",
        "technology": "Blender",
        "title": "Shooting Range 3D Scene",
        "image": "/assets/images/blender/target-scene.jpg",
        "files": [
            "/assets/images/gifs/shooting-target-scene.gif"
        ],
        "projectInformation": [
            "Toolkit: Blender",
            "Assets: Blender models",
            "Models: Blender",
            "Audio: None",
            "Animation: None"
        ],
        "projectPurpose": ""
    },
    {
        "id": "10",
        "technology": "VR",
        "title": "VR Zombie Game",
        "image": "/assets/images/vr/zombie.jpg",
        "files": [
            ""
        ],
        "projectInformation": [
            "Datum: ",
            ":Tredje Unity project",
            "Toolkit: XR Interaction",
            "Assets: Unity",
            "Scene: Blender",
            "Audio: FMOD",
            "Animation: Mixamo",
            "Character: Mixamo"
        ],
        "projectPurpose": "Jag ville lära mig fyra saker i detta projekt: Hur man skapar ett wave system? Hur en spelare kan göra skada på fiende? Hur fienden kan göra skada på spelaren, och hur Unitys enemy-AI fungerar? Projektet var mycket utmanande och jag stötte på många hinder. En av utmaningarna var att beräkna skadan från fienden. Detta blev svårare för mig då fienden i mitt fall var en zombie som inte hade något vapen och hade en specifik animation när den attackerade, vilken jag var tvungen att hålla mig till. Till slut lyckades jag lösa det problemet och även besvara alla mina frågor. Genom detta projekt har mina kunskaper inom programmering utvecklats ytterligare."
    },
    {
        "id": "11",
        "technology": "Blender",
        "title": "Shipment 3D Scene",
        "image": "/assets/images/blender/shipment-3d/shipment-3d-4.jpg",
        "files": [
            "/assets/images/blender/shipment-3d/shipment-3d-1.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-2.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-3.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-4.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-5.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-6.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-7.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-8.jpg",
            "/assets/images/blender/shipment-3d/shipment-3d-9.jpg"
        ],
        "projectInformation": [
            "Toolkit: Blender",
            "Assets: Blender models",
            "Models: Blender",
            "Audio: None",
            "Animation: None"
        ],
        "projectPurpose": [
            "Project Structure: Developed a .NET Web API project using Microsoft.AspNetCore for creating a robust and scalable web application.",
            "Dependency Injection: Utilized Microsoft.Extensions.DependencyInjection to manage dependency injection. Scoped various repositories and services, including custom services like `ICourseService` and `IAccountService`, following best practices for separation of concerns and maintainability.",
            "Authentication and Authorization: Implemented JWT (JSON Web Token) authentication to ensure secure user access. Configured ASP.NET Core Identity for user management, incorporating role-based access, email confirmation requirements, and secure password policies.",
            "Database Integration: Integrated Microsoft.EntityFrameworkCore with SQL Server for data management. Leveraged Entity Framework Core for modeling relational data, including one-to-one and one-to-many relationships, with a focus on efficient data access and manipulation.",
            "Cloud-Based Storage: Configured Cloudinary settings for managing cloud-based image and video storage, enabling efficient media handling and retrieval.",
            "File Uploads: Configured form options to handle large file uploads with a multipart body length limit of 600 MB, ensuring robust file management capabilities.",
            "Data Seeding: Seeded initial data and configured user manager during application startup to populate necessary records and setup required configurations.",
            "Security Configurations: Enhanced security through HTTPS redirection, custom MIME type mappings for static files, and secure static file serving practices.",
            "Email Configuration: Set up SMTP configuration for sending emails, including server details and credentials, to support features like email confirmation and notifications.",
            "HTTP Request Pipeline: Configured the HTTP request pipeline with middleware for authentication, authorization, CORS, static file serving, and custom routing, ensuring a secure and efficient request handling process."
        ]
    }
]